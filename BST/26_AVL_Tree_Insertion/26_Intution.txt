Question Link : https://www.geeksforgeeks.org/problems/avl-tree-insertion/1

*   Steps to follow for insertion:

    Let the newly inserted node be w 

    (1) Perform standard BST insert for w. 

    (2) Starting from w, travel up and find the first unbalanced node. Let z be the first unbalanced node, 
        y be the child of z that comes on the path from w to z and x be the grandchild of z that comes on 
        the path from w to z. 
    
    (3) Re-balance the tree by performing appropriate rotations on the subtree rooted with z. There can be
        4 possible cases that need to be handled as x, y and z can be arranged in 4 ways.

        Following are the possible 4 arrangements: 

        y is the left child of z and x is the left child of y (Left Left Case) 
        y is the left child of z and x is the right child of y (Left Right Case) 
        y is the right child of z and x is the right child of y (Right Right Case) 
        y is the right child of z and x is the left child of y (Right Left Case)

*   Following are the operations to be performed in above mentioned 4 cases. 
    In all of the cases, we only need to re-balance the subtree rooted with z and the complete tree becomes 
    balanced as the height of the subtree (After appropriate rotations) rooted with z becomes the same as 
    it was before insertion.

*   T1, T2, T3 and T4 are subtrees.

    (1) Left Left Case 

                 z                                      y 
                / \                                   /   \
               y   T4      Right Rotate (z)          x      z
              / \          - - - - - - - - ->      /  \    /  \ 
             x   T3                               T1  T2  T3  T4
            / \
          T1   T2

    (2) Left Right Case 

             z                               z                           x
            / \                            /   \                        /  \ 
           y   T4  Left Rotate (y)        x    T4  Right Rotate(z)    y      z
          / \      - - - - - - - - ->    /  \      - - - - - - - ->  / \    / \
        T1   x                          y    T3                    T1  T2 T3  T4
            / \                        / \
          T2   T3                    T1   T2

    (3) Right Right Case 

          z                                y
         /  \                            /   \ 
        T1   y     Left Rotate(z)       z      x
            /  \   - - - - - - - ->    / \    / \
           T2   x                     T1  T2 T3  T4
               / \
             T3  T4

    (4) Right Left Case 

           z                            z                            x
          / \                          / \                          /  \ 
        T1   y   Right Rotate (y)    T1   x      Left Rotate(z)   z      y
            / \  - - - - - - - - ->     /  \   - - - - - - - ->  / \    / \
           x   T4                      T2   y                  T1  T2  T3  T4
          / \                              /  \
        T2   T3                           T3   T4

*   Follow the steps mentioned below to implement the idea:

    (1) Perform the normal BST insertion. 

    (2) The current node must be one of the ancestors of the newly inserted node. Update the height 
        of the current node.

    (3) Get the balance factor (left subtree height â€“ right subtree height) of the current node.

    (4) If the balance factor is greater than 1, then the current node is unbalanced and we are either 
        in the Left Left case or left Right case. To check whether it is left left case or not, compare 
        the newly inserted key with the key in the left subtree root. 
    
    (5) If the balance factor is less than -1, then the current node is unbalanced and we are either 
        in the Right Right case or Right-Left case. To check whether it is the Right Right case or not, 
        compare the newly inserted key with the key in the right subtree root.    