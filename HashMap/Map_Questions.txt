*   Explain LinkedHashMap<K, V> in detail.   

>>  LinkedHashMap<K, V> is a subclass of HashMap<K, V> that maintains a predictable iteration order.

        ```
            public class LinkedHashMap<K,V> extends HashMap<K,V> implements Map<K,V>
        ```
    
    It maintains a doubly linked list of its entries to preserve the insertion order or access order. 

    Internal Structure:
        
        - It uses array of buckets (Entry<K,V>) like HashMap.

        - Each bucket contains a Entry<K,V> (same as in HashMap), but with extra pointers to maintain doubly linked list.

            ```
                static class Entry<K,V> extends HashMap.Node<K,V> {

                    // pointers for doubly linked list
                    Entry<K,V> before;
                    Entry<K,V> after; 
                }
            ```
    
    Iteration Order:

        (a) Insertion Order Mode (default):
        
            - By default, the iteration order of a LinkedHashMap is the order in which entries were inserted. 
            
            - So, the first inserted element is returned first during iteration, and so on.    

        (b) Access Order Mode (accessOrder = true):
        
            - When accessOrder=true, any get(), put() (on existing key), or compute() access moves the entry to the end 
              of the doubly linkedlist.

            - It returns entries from least recently accessed to most recently accessed.

    Performance:

        - LinkedHashMap is slightly slower than HashMap because of the overhead of maintaining the doubly linked list 
          for ordering. 
          
        - However, it still provides O(1) time complexity for get() and put() operations.

________________________________________________________________________________________________________________________

*   Explain TreeMap<K, V> in detail.

>>  TreeMap<K, V> is an implementation of Map<K, V> based on a Red-Black Tree, a type of self-balancing binary search tree (BST).

    It stores key-value pairs in a sorted order of keys.

    Internal Node Structure (Entry<K, V>):

        - The Entry<K, V> class in TreeMap<K, V> is an implementation of Map.Entry<K, V> interface. 

        - Each node (Entry<K,V>) stores:

            - key
            - value
            - left, right, and parent references
            - color (RED or BLACK)

        ```
            static final class Entry<K,V> implements Map.Entry<K,V> {
                K key;
                V value;
                Entry<K,V> left;
                Entry<K,V> right;
                Entry<K,V> parent;
                boolean color; // true = RED, false = BLACK
            }
        ```

    Internal Working:

        (1) put(K key, V value):
            
            (a) Comparison Based on Ordering:

                - If no Comparator is given, keys are compared using their natural ordering (Comparable).

                - If a Comparator is passed, it is used to compare the keys.

            (b) Binary Search Tree Insertion:

                - The new key is inserted in the tree at the correct position to maintain the sorted order.

            (c) Red-Black Tree Balancing:

                - After insertion, the Red-Black Tree properties may be violated.

                - TreeMap performs color changes and rotations (left or right) to rebalance the tree in O(log n) time.
    
        (2) get(Object key):

            (a) Binary Search:

                - Starts from the root and uses the comparator (or natural order) to search down the left or right subtree.

                - Search continues until the key is found or null is returned.

            (b) Logarithmic Time:

                - Because the tree is balanced (height is O(log n)), the lookup is also O(log n).

________________________________________________________________________________________________________________________