*   In BST, if we travese in in-order fashion, then the result of nodes will be in increasing
    or decreasing order based on whether we traversed left or right first.

*   Here we need to check kth largest, so while traversing first we will move to right subtree
    and then left

*   To track the count of n largest node, we will use a global vaiable viz count whose intial value
    will be 1 and another global variable to store Kth largest node value.

*   While traversing tree, after returning from right subtree check if the var count is equal to 
    K or not. We are checking this after returning from right subtree cause we have to follow
    in order traversal (right-->root-->left)

*   if count is equal to K, then initalize global var kthLargest with curr node value.

*   before going to left, just inc count value by 1.