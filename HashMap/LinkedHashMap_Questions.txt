*   Explain LinkedHashMap<K, V> in detail.   

>>  LinkedHashMap<K, V> is a subclass of HashMap<K, V> that maintains a predictable iteration order.

        ```
            public class LinkedHashMap<K,V> extends HashMap<K,V> implements Map<K,V>
        ```
    
    It maintains a doubly linked list of its entries to preserve the insertion order or access order. 

    Internal Structure:
        
        - It uses array of buckets (Entry<K,V>) like HashMap.

        - Each bucket contains a Entry<K,V> (same as in HashMap), but with extra pointers to maintain doubly linked list.

            ```
                static class Entry<K,V> extends HashMap.Node<K,V> {

                    // pointers for doubly linked list
                    Entry<K,V> before;
                    Entry<K,V> after; 
                }
            ```
    
    Iteration Order:

        (a) Insertion Order Mode (default):
        
            - By default, the iteration order of a LinkedHashMap is the order in which entries were inserted. 
            
            - So, the first inserted element is returned first during iteration, and so on.    

        (b) Access Order Mode (accessOrder = true):
        
            - When accessOrder=true, any get(), put() (on existing key), or compute() access moves the entry to the end 
              of the doubly linkedlist.

            - It returns entries from least recently accessed to most recently accessed.

    Performance:

        - LinkedHashMap is slightly slower than HashMap because of the overhead of maintaining the doubly linked list 
          for ordering. 
          
        - However, it still provides O(1) time complexity for get() and put() operations.

________________________________________________________________________________________________________________________